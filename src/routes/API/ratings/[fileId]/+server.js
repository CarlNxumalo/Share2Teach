import { json } from '@sveltejs/kit';
import RatingDAO from '$lib/DAOClasses/RatingDAO.js'; // Adjust as necessary
import Rating from '$lib/Classes/Rating.js';


/**
 * @swagger
 * tags:
 *   name: Ratings
 *   description: API for managing ratings
 */

/**
 * @swagger
 * /API/ratings:
 *   post:
 *     summary: Add a new rating
 *     tags: [Ratings]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ratingData:
 *                 type: object
 *                 properties:
 *                   rate:
 *                     type: integer
 *                     description: The rating value
 *                   fileID:
 *                     type: string
 *                     description: The ID of the file being rated
 *     responses:
 *       201:
 *         description: Rating added successfully
 *       500:
 *         description: Failed to add rating
 */
export async function POST({ request }) {
    const { ratingData } = await request.json();
    const ratingDAO = new RatingDAO();

    try {
        await ratingDAO.connect();
        const rating = new Rating(null, ratingData.rate, ratingData.fileID); // Assuming ratingID is generated by the database
        const success = await ratingDAO.addRating(rating);

        if (success) {
            return json({ message: 'Rating added successfully' }, { status: 201 });
        } else {
            return json({ error: 'Failed to add rating' }, { status: 500 });
        }
    } catch (error) {
        console.error('Error adding rating:', error);
        return json({ error: 'Internal Server Error' }, { status: 500 });
    } finally {
        await ratingDAO.disconnect();
    }
}

/**
 * @swagger
 * /API/ratings/{fileId}:
 *   get:
 *     summary: Get the average rating by file ID
 *     tags: [Ratings]
 *     parameters:
 *       - in: path
 *         name: fileId
 *         required: true
 *         description: ID of the file to fetch average rating for
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Average rating fetched successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 averageRating:
 *                   type: number
 *       500:
 *         description: Internal Server Error
 */
export async function GET({ params }) {
    const { fileId } = params; // Get file ID from the URL parameters
    const ratingDAO = new RatingDAO();

    try {
        await ratingDAO.connect();
        const averageRating = await ratingDAO.getAverageRating(fileId);
        return json({ averageRating }, { status: 200 });
    } catch (error) {
        console.error('Error fetching average rating:', error);
        return json({ error: 'Internal Server Error' }, { status: 500 });
    } finally {
        await ratingDAO.disconnect();
    }
}

/**
 * @swagger
 * /API/ratings:
 *   put:
 *     summary: Update a rating
 *     tags: [Ratings]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ratingData:
 *                 type: object
 *                 properties:
 *                   ratingID:
 *                     type: integer
 *                     description: The ID of the rating to update
 *                   rate:
 *                     type: integer
 *                     description: The new rating value
 *                   fileID:
 *                     type: string
 *                     description: The ID of the file associated with the rating
 *     responses:
 *       200:
 *         description: Rating updated successfully
 *       500:
 *         description: Failed to update rating
 */
export async function PUT({ request }) {
    const ratingDAO = new RatingDAO();
    
    try {
        const { ratingData } = await request.json(); // Get updated rating data
        const rating = new Rating(ratingData.ratingID, ratingData.rate, ratingData.fileID); // Create the Rating object
        
        await ratingDAO.connect();
        const success = await ratingDAO.updateRating(rating); // Attempt to update the rating
        
        if (success) {
            return json({ message: 'Rating updated successfully' }, { status: 200 });
        } else {
            return json({ error: 'Failed to update rating' }, { status: 500 });
        }
    } catch (error) {
        console.error('Error updating rating:', error);
        return json({ error: 'Internal Server Error' }, { status: 500 });
    } finally {
        await ratingDAO.disconnect();
    }
}

/**
 * @swagger
 * /API/ratings/{fileId}:
 *   delete:
 *     summary: Delete a rating
 *     tags: [Ratings]
 *     parameters:
 *       - in: path
 *         name: fileId
 *         required: true
 *         description: ID of the file whose rating needs to be deleted
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Rating deleted successfully
 *       500:
 *         description: Internal Server Error
 */
export async function DELETE({ params }) {
    const { fileId } = params; // Get file ID from the URL parameters
    
    if (!fileId) {
        return json({ error: 'File ID is required' }, { status: 400 });
    }

    const ratingDAO = new RatingDAO();  

    try {
        await ratingDAO.connect();
        await ratingDAO.deleteRating(parseInt(fileId)); // Convert file ID to an integer and delete the rating
        return json({ message: 'Rating deleted successfully' }, { status: 200 });
    } catch (error) {
        console.error('Error deleting rating:', error);
        return json({ error: 'Internal Server Error' }, { status: 500 });
    } finally {
        try {
            await ratingDAO.disconnect();
        } catch (disconnectError) {
            console.error('Error closing database connection:', disconnectError);
        }
    }
}

